/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const authResetPasswdLazyImport = createFileRoute('/(auth)/reset-passwd')()
const authLoginLazyImport = createFileRoute('/(auth)/login')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const authResetPasswdLazyRoute = authResetPasswdLazyImport
  .update({
    id: '/(auth)/reset-passwd',
    path: '/reset-passwd',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/reset-passwd.lazy').then((d) => d.Route))

const authLoginLazyRoute = authLoginLazyImport
  .update({
    id: '/(auth)/login',
    path: '/login',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/login.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/reset-passwd': {
      id: '/(auth)/reset-passwd'
      path: '/reset-passwd'
      fullPath: '/reset-passwd'
      preLoaderRoute: typeof authResetPasswdLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/login': typeof authLoginLazyRoute
  '/reset-passwd': typeof authResetPasswdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof authLoginLazyRoute
  '/reset-passwd': typeof authResetPasswdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/(auth)/login': typeof authLoginLazyRoute
  '/(auth)/reset-passwd': typeof authResetPasswdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/reset-passwd'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/reset-passwd'
  id: '__root__' | '/' | '/(auth)/login' | '/(auth)/reset-passwd'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  authLoginLazyRoute: typeof authLoginLazyRoute
  authResetPasswdLazyRoute: typeof authResetPasswdLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  authLoginLazyRoute: authLoginLazyRoute,
  authResetPasswdLazyRoute: authResetPasswdLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)/login",
        "/(auth)/reset-passwd"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.lazy.tsx"
    },
    "/(auth)/reset-passwd": {
      "filePath": "(auth)/reset-passwd.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
